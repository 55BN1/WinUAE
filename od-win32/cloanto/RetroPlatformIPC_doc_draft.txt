Reference for RetroPlatformIPC.h (RP Player interprocess communication include file)


****************************************************************************
 Guest-to-Host Messages
****************************************************************************

Message:
   RPIPCGM_REGISTER
Description:
   this is a private message and is automatically sent
   by the RPInitializeGuest() function
   to register the caller as a RetroPlatform guest


Message:
   RPIPCGM_FEATURES
Description:
   the guest uses this message to tell the host
   about the features it supports;
   at startup time, the guest sends initialization messages
   so that the host can adapt the GUI based on the reported features;
   these messages include:
      RPIPCGM_FEATURES (describes guest features),
      RPIPCGM_POWERLED (turns on the power LED in the GUI),
      RPIPCGM_DEVICES (one for each device category: tells the number of emulated devices),
      RPIPCGM_DEVICECONTENT (one for each device with an image file or peripheral attached),
      RPIPCGM_TURBO (tells if some of the turbo modes are activated from the start),
      RPIPCGM_VOLUME (reports about starting volume level),
      RPIPCGM_SCREENMODE (communicates the screen mode and the guest window handle);
   note that at startup time the guest should create a borderless and hidden window
   and send its handle using a RPIPCGM_SCREENMODE message, which must be the last
   of the initialization messages, since it displays the guest window
   and the host "frame window" (the part of the player user interface
   with command and status icons which can be used to drag the guest window, etc.)
Data sent:
   WPARAM = RP_FEATURE_* flags
Response:
   none


Message:
   RPIPCGM_CLOSED
Description:
   this message is sent to the host when the guest is terminating
Data sent:
   none
Response:
   none


Message:
   RPIPCGM_ACTIVATED
Description:
   the guest sends this message to the host
   when its window is being activated
Data sent:
   LPARAM = identifier of the thread that owns the window being deactivated
Response:
   none


Message:
   RPIPCGM_DEACTIVATED
Description:
   the guest sends this message to the host
   when its window is being deactivated
Data sent:
   LPARAM = identifier of the thread that owns the window being activated
Response:
   none


Message:
   RPIPCGM_SCREENMODE
Description:
   the guest sends a RPIPCGM_SCREENMODE message to notify the host
   about a change in its "screen mode" (1x/2x/4x/full screen, etc.);
   screen mode changes requested by the host
   (see the RPIPCHM_SCREENMODE message) must not be notified,
   unless this is an asynchronous screen mode change
   (i.e. the guest returned the INVALID_HANDLE_VALUE
   response to a RPIPCHM_SCREENMODE host request);
   this message can also be sent when the guest has to close
   and reopen its window for other reasons;
   at startup-time, the guest must create
   a borderless and hidden window and send its handle
   using this message; the host will then take care
   of preparing, positioning and showing the guest window
Data sent:
   WPARAM = new screen mode (RP_SCREENMODE_* value)
   LPARAM = handle of the (new) guest window
Response:
   none


Message:
   RPIPCGM_POWERLED
Description:
   sent to the host to change the power LED state
Data sent:
   WPARAM = power LED intensity (min/off 0, max 100)
Response:
   none


Message:
   RPIPCGM_DEVICES
Description:
   this message is used to notify the host about a change
   in the number of emulated devices (floppy drives, hard disks, etc.)
Data sent:
   WPARAM = device category (RP_DEVICE_* value)
   LPARAM = 32-bit bitfield representing the devices
            emulated in the specified category
            (every bit set to 1 corresponds to a mounted drive
             e.g. 0x00000005 = drive 0 and drive 2 are emulated)
Response:
   none


Message:
   RPIPCGM_DEVICEACTIVITY
Description:
   this message can be used to turn on or off the activity indicator
   of a specified device (like a LED on the original hardware);
   the indicator can also be "blinked", i.e. the host will turn the
   LED on and then off again after the specified amount of time
Data sent:
   WPARAM = device category (RP_DEVICE_* value) and device number
            combined with the MAKEWORD macro;
            e.g. MAKEWORD(RP_DEVICE_FLOPPY, 0);
            the RP_ALL_DEVICES define may be used as device number
            to turn on or off all the activity leds for a device category
   LPARAM = 0 turns off the activity LED,
            (LPARAM)-1 turns on the activity LED,
            <millisecond delay> turns on the activity LED
            for the specified amount of time (blink)
Response:
   none


Message:
   RPIPCGM_MOUSECAPTURE
Description:
   the guest sends this message when the mouse is captured/released
   (the mouse is "captured" when its movements are restricted to the guest window area
   and the system cursor is not visible);
   mouse capture changes requested by the host
   (see the RPIPCHM_MOUSECAPTURE message) must not be notified;
   for consistency across different guests, a guest which sends RPIPCGM_MOUSECAPTURE
   messages should also implement a keyboard-actuated escape functionality
   (the preferred key for this purpose is included in the parameters sent from the
   host at startup time - see RPLaunchGuest() in RetroPlatformPlugin.h);
   note that in order not to interfere with the window dragging functionality,
   the mouse should not be captured when the guest window gets the focus,
   but when a mouse button event is received
Data sent:
   WPARAM = mouse capture state (RP_MOUSECAPTURE_* value)
Response:
   none


Message:
   RPIPCGM_HOSTAPIVERSION
Description:
    the guest can send a RPIPCGM_HOSTAPIVERSION to query the host
    about the RetroPlatform API version it implements;
    since the guest plugin already asks for a minimim version of the API
    on the host side, this message can be used to check the host API version
    and enable optional functionality
Data sent:
   none
Response:
   LRESULT = major and minor version combined with the MAKELONG macro
             (e.g. LOWORD(lr) = major version; HIWORD(lr) = minor version)


Message:
   RPIPCGM_PAUSE
Description:
   the guest sends this message to the host
   when it enters or exits pause mode;
   pause mode changes requested by the host
   (see the RPIPCHM_PAUSE message) must not be notified;
   note: when paused, the guest should release the mouse (if captured)
Data sent:
   WPARAM = non-zero when the guest enters pause mode
            or zero when the guest exits from pause mode
Response:
   none


Message:
   RPIPCGM_DEVICECONTENT
Description:
   the guest sends a RPIPCGM_DEVICECONTENT message
   to notify the host that an image file (e.g. a floppy disk image)
   or a peripheral (e.g. a joystick)
   has been loaded into (or ejected from) an emulated device;
   this notification must not be sent when the event
   has been requested by the host (see the RPIPCHM_DEVICECONTENT message)
Data sent:
   pData = a RPDEVICECONTENT structure (see below);
           the szImageFile field of the structure
           contains an empty string when the guest
           is ejecting something from the device
Response:
   none


Message:
   RPIPCGM_TURBO
Description:
   the guest sends a RPIPCGM_TURBO message
   to notify the host about activation of "turbo" (maximum speed) mode
   of some of its functionalities (e.g. floppy, CPU);
   turbo mode activations/deactivations requested by the host
   (see the RPIPCHM_TURBO message) must not be notified;
Data sent:
   WPARAM = mask of functionalities affected (RP_TURBO_* flags)
   LPARAM = bits corresponding to those set in WPARAM
            (1 = turbo mode activated for the guest functionality
             0 = guest functionality reverted to normal speed)
Response:
   none


Message:
   RPIPCGM_PING
Description:
   this is a no-operation message and can be sent
   to check if the host is responsive and functional
Data sent:
   none
Response:
   LRESULT = non-zero value is returned


Message:
   RPIPCGM_VOLUME
Description:
   the guest uses the RPIPCGM_VOLUME message
   to notify the host about a change of its audio level;
   audio level changes requested by the host
   (see the RPIPCHM_VOLUME message) must not be notified
Data sent:
   WPARAM = volume level (min/off 0, max 100)
Response:
   none


Message:
   RPIPCGM_ESCAPED
Description:
   this message is sent to notify the host
   that the escape key has been held down
Data sent:
   none
Response:
   none


Message:
   RPIPCGM_PARENT
Description:
   the guest sends this message to the host to get the handle
   of the parent for its window; the guest window must be created
   as a borderless (WS_POPUP style), hidden window,
   using the handle returned by this message as the parent window parameter
Data sent:
   none
Response:
   LRESULT = window handle (HWND) to use in a CreateWindow call


Message:
   RPIPCGM_DEVICESEEK
Description:
   this message can be used to notify the host about a seek operation
   of a specified device (e.g. the head of a disk drive changes position);
Data sent:
   WPARAM = device category (RP_DEVICE_* value) and device number
            combined with the MAKEWORD macro;
            e.g. MAKEWORD(RP_DEVICE_FLOPPY, 0)
   LPARAM = device-dependant seek position (e.g. drive track position)
Response:
   none





****************************************************************************
 Host-to-Guest Messages
****************************************************************************

Message:
   RPIPCHM_CLOSE
Description:
   sent from the host when the emulation must be terminated
   (e.g. the user has hit the close button in the host window);
   the guest should destroy its window and terminate (see Response below)
Data sent:
   none
Response:
   LRESULT = non-zero if the guest can safely terminate or 0 otherwise


Message:
   RPIPCHM_SCREENMODE
Description:
   this message is sent to ask the guest to activate a specified screen mode;
   when switching to the new screen mode, the guest can resize (reuse) its window
   or close its window and open a new one
Data sent:
   WPARAM = RP_SCREENMODE_* value
Response:
   LRESULT = handle of the (new) guest window
             or NULL (the screen mode couldn't be changed)
             or INVALID_HANDLE_VALUE (the screen mode will be changed asynchronously
             and the host will soon get a RPIPCGM_SCREENMODE notification)


Message:
   RPIPCHM_SCREENCAPTURE
Description:
   with this message the host asks the guest to save its screen
   to the the specified file in BMP format
Data sent:
   pData = (Unicode) full path and name of the file to save
           (note: the file may exist and can be overwritten)
Response:
   LRESULT = non-zero if the guest saved its screen to the file


Message:
   RPIPCHM_PAUSE
Description:
   the RPIPCHM_PAUSE message sets the guest into pause mode
   or resumes the guest from pause mode;
   note: when paused, the guest should release the mouse (if captured)
Data sent:
   WPARAM = non-zero to set the guest into pause mode
            or zero to resume the guest from pause mode
Response:
   LRESULT = non-zero if the guest executed the command


Message:
   RPIPCHM_DEVICECONTENT
Description:
   the host sends a RPIPCHM_DEVICECONTENT message
   to load an image file or a peripheral into an emulated device
   (e.g. an ADF floppy file into a floppy drive,
   or a physical or keyboard-emulated joystick into an input port)
   or to unload the currently loaded content from the device
Data sent:
   pData = a RPDEVICECONTENT structure (see below);
           if the szImageFile field of the structure
           contains an empty string, the guest should
           unload the current content from the device
Response:
   LRESULT = non-zero if the guest executed the command


Message:
   RPIPCHM_RESET
Description:
   the host sends this message to reset the guest
Data sent:
   WPARAM = a RP_RESET_* value
Response:
   LRESULT = non-zero if the guest executed the command


Message:
   RPIPCHM_TURBO
Description:
   the host sends this message to activate or deactivate
   the turbo mode of selected guest functionalities
Data sent:
   WPARAM = mask of functionalities to change (RP_TURBO_* flags)
   LPARAM = bits corresponding to those set in WPARAM
            (1 = speedup the guest functionality
             0 = revert to normal speed emulation)
Response:
   LRESULT = non-zero if the guest executed the command


Message:
   RPIPCHM_PING
Description:
   this is a no-operation message and can be sent
   to check if the guest is responsive and functional
Data sent:
   none
Response:
   LRESULT = non-zero value is returned


Message:
   RPIPCHM_VOLUME
Description:
   the host uses the RPIPCHM_VOLUME message to set
   the audio level of the guest
Data sent:
   WPARAM = volume level (min 0, max 100)
Response:
   LRESULT = non-zero if the guest set the volume as requested


Message:
   RPIPCHM_ESCAPEKEY
Description:
   the host uses the RPIPCHM_ESCAPEKEY message
   to change the escape key information
Data sent:
   WPARAM = DirectInput DIK_* identifier of the escape key
            (e.g. 1 for the Esc key - see DIK_* constants in dinput.h)
   LPARAM = milliseconds value
            (amount of time the user has to hold the above key to trigger the escape functionality)
Response:
   LRESULT = non-zero if the guest accepted the new settings


Message:
   RPIPCHM_EVENT
Description:
   the host uses the RPIPCHM_EVENT message
   to simulate keyboard, mouse, joystick (press/release)
   and other guest-specific events
Data sent:
   pData = (Unicode) event string (guest-specific)
Response:
   LRESULT = non-zero if the guest simulated the specified event


Message:
   RPIPCHM_MOUSECAPTURE
Description:
   the host uses this message to ask the guest
   to capture or release the mouse
Data sent:
   WPARAM = mouse capture state being requested (RP_MOUSECAPTURE_* value)
Response:
   LRESULT = non-zero if the guest executed the command


Message:
   RPIPCHM_SCREENCLIP
Description:
   this command is used to set the clipping coordinates of the screen
Data sent:
   pData = a RPSCREENCLIP structure
Response:
   LRESULT = non-zero if the guest executed the command



// ****************************************************************************
//  Message Data Structures and Defines
// ****************************************************************************

// Guest Features
#define RP_FEATURE_POWERLED      0x00000001 // a power LED is emulated
#define RP_FEATURE_SCREEN1X      0x00000002 // 1x windowed mode is available
#define RP_FEATURE_SCREEN2X      0x00000004 // 2x windowed mode is available
#define RP_FEATURE_SCREEN4X      0x00000008 // 4x windowed mode is available
#define RP_FEATURE_FULLSCREEN    0x00000010 // full screen display is available
#define RP_FEATURE_SCREENCAPTURE 0x00000020 // screen capture functionality is available (see RPIPCHM_SCREENCAPTURE message)
#define RP_FEATURE_PAUSE         0x00000040 // pause functionality is available (see RPIPCHM_PAUSE message)
#define RP_FEATURE_TURBO         0x00000080 // turbo mode functionality is available (see RPIPCHM_TURBO message)
#define RP_FEATURE_VOLUME        0x00000100 // volume adjustment is possible (see RPIPCHM_VOLUME message)

// Screen Modes
#define RP_SCREENMODE_1X          0 // 1x windowed mode
#define RP_SCREENMODE_2X          1 // 2x windowed mode
#define RP_SCREENMODE_4X          2 // 4x windowed mode
#define RP_SCREENMODE_FULLSCREEN  3 // full screen

// Device Categories
#define RP_DEVICE_FLOPPY    0 // floppy disk drive
#define RP_DEVICE_HD        1 // hard disk drive
#define RP_DEVICE_CD        2 // CD/DVD drive
#define RP_DEVICE_NET       3 // network card
#define RP_DEVICE_TAPE      4 // cassette tape drive
#define RP_DEVICE_CARTRIDGE 5 // expansion cartridge
#define RP_DEVICE_INPUTPORT 6 // input port

typedef struct RPDeviceContent
{
	BYTE  btDeviceCategory; // RP_DEVICE_* value
	BYTE  btDeviceNumber;   // device number (range 0..31)
	WCHAR szContent[1];     // full path and name of the image file to load, or input port device (Unicode, variable-sized field)
} RPDEVICECONTENT;

// Input Port Devices
#define RP_IPD_MOUSE1    L"Mouse1" // first mouse type (e.g. Windows Mouse for WinUAE)
#define RP_IPD_MOUSE2    L"Mouse2" // second mouse type (e.g. Mouse for WinUAE)
#define RP_IPD_MOUSE3    L"Mouse3" // third mouse type (e.g. Mousehack Mouse for WinUAE)
#define RP_IPD_MOUSE4    L"Mouse4" // fourth mouse type (e.g. RAW Mouse for WinUAE)
#define RP_IPD_JOYSTICK1 L"Joystick1" // first joystick type (e.g. standard joystick for WinUAE, described as "Joystick1\ProductGUID\ProductName")
#define RP_IPD_JOYSTICK2 L"Joystick2" // second joystick type (e.g. X-Arcade (Left) joystick for WinUAE, described as "Joystick2\ProductGUID\ProductName")
#define RP_IPD_JOYSTICK3 L"Joystick3" // third joystick type (e.g. X-Arcade (Right) joystick for WinUAE, described as "Joystick3\ProductGUID\ProductName")
#define RP_IPD_KEYBDL1   L"KeyboardLayout1" // first joystick emulation keyboard layout (e.g. Keyboard Layout A for WinUAE)
#define RP_IPD_KEYBDL2   L"KeyboardLayout2" // second joystick emulation keyboard layout (e.g. Keyboard Layout B for WinUAE)
#define RP_IPD_KEYBDL3   L"KeyboardLayout3" // third joystick emulation keyboard layout (e.g. Keyboard Layout C for WinUAE)

// Turbo Mode Functionalities
#define RP_TURBO_CPU     0x00000001 // CPU
#define RP_TURBO_FLOPPY  0x00000002 // floppy disk drive
#define RP_TURBO_TAPE    0x00000004 // cassette tape drive

// Reset Type
#define RP_RESET_SOFT  0 // soft reset
#define RP_RESET_HARD  1 // hard reset

// RPIPCGM_MOUSECAPTURE/RPIPCHM_MOUSECAPTURE
#define RP_MOUSECAPTURE_UNCAPTURED   0
#define RP_MOUSECAPTURE_CAPTURED     1
#define RP_MOUSECAPTURE_MAGICMOUSE   2

typedef struct RPScreenClip
{
	LONG lLeft;
	LONG lTop;
	LONG lWidth;
	LONG lHeight;
} RPSCREENCLIP;

#endif // __CLOANTO_RETROPLATFORMIPC_H__
